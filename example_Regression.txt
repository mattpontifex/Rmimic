tryCatch(library(ggplot2), error=function(e){install.packages("ggplot2"); library(ggplot2)})
tryCatch(library(interactions), error=function(e){install.packages("interactions"); library(interactions)})
tryCatch(library(sandwich), error=function(e){install.packages("sandwich"); library(sandwich)})

Age <- round(stats::runif(180, 7, 12), digits = 0)
AgeZ <- scale(Age)
Sex <- round(stats::runif(180, 0, 1), digits = 0)
SexZ <- scale(Sex)
Attribute <- round(stats::runif(180, 0, 100), digits = 1)
AttributeZ <- scale(Attribute)
mockdatabase <- data.frame("PartID" = rep_len(1:180,180),
                           "Age" = Age,
                           "Sex" = Sex,
                           "Attribute" = Attribute,
                           "AgeZ" = AgeZ,
                           "SexZ" = SexZ,
                           "AttributeZ" = AttributeZ)
rm(Age, AgeZ, Sex, SexZ, Attribute, AttributeZ)
mockdatabase = rbind(mockdatabase, mockdatabase)
mockdatabase$Congruency = rep_len(c(rep_len("Congruent",180),rep_len("Incongruent",180)),360)
mockdatabase$DV = round(stats::runif(360, 20, 30), digits = 2)

ggplot(mockdatabase, aes(x=Attribute, y=DV, color=Congruency)) + geom_point()

# force effects
selectidx = which(mockdatabase$Congruency == 'Incongruent')
mockdatabase$DV[selectidx] = mockdatabase$DV[selectidx] - 6  # Congruency intercept shift
mockdatabase$DV = mockdatabase$DV + (mockdatabase$AgeZ * 2) # Age intercept shift
selectidx = which(mockdatabase$Congruency == 'Incongruent')
mockdatabase$DV[selectidx] = mockdatabase$DV[selectidx] + (mockdatabase$AttributeZ[selectidx] * 2) # fitness x congruency interaction

ggplot(mockdatabase, aes(x=Attribute, y=DV, color=Congruency)) + geom_point()

# standard regression
simplefit <- lm(DV ~ Age + Sex + Congruency, data = mockdatabase)
summary(simplefit)

## interaction
fit <- lm(DV ~ Age + Sex + Congruency*Attribute, data = mockdatabase)
ss <- interactions::sim_slopes(fit, pred = Attribute, modx = Congruency, cond.int = TRUE, johnson_neyman = FALSE, control.fdr = TRUE)
summary(fit)
show(ss)
interactions::interact_plot(fit, pred = Attribute, modx = Congruency, plot.points = TRUE, interval = TRUE, int.width = 0.95)

# robust linear regression
tryCatch(library(MASS), error=function(e){install.packages("MASS"); library(MASS)}) # MASS::rlm
tryCatch(library(sfsmisc), error=function(e){install.packages("sfsmisc"); library(sfsmisc)}) # sfsmisc::f.robftest
fit <- MASS::rlm(DV ~ Age + Sex + Congruency, data = mockdatabase)
summary(fit) # model fit
sfsmisc::f.robftest(fit, var = "Age")
sfsmisc::f.robftest(fit, var = "Sex")
sfsmisc::f.robftest(fit, var = "CongruencyIncongruent")

# multilevel model
tryCatch(library(lme4), error=function(e){install.packages("lme4"); library(lme4)})
tryCatch(library(lmerTest), error=function(e){install.packages("lmerTest"); library(lmerTest)}) # modifies lme4
tryCatch(library(emmeans), error=function(e){install.packages("emmeans"); library(emmeans)}) #lsmeans
simplefit <- lmerTest::lmer(DV ~ 1 + (1 | PartID), data=mockdatabase, REML=FALSE)
fit <- lmerTest::lmer(DV ~ Age + Sex + Congruency + (1 | PartID), data=mockdatabase, REML=FALSE)
summary(fit) # model fit
anova(simplefit, fit) # are the models different

# logistic multilevel model
fit <- lme4::glmer(Sex ~ DV + (1 | PartID), data=mockdatabase, family=binomial(link="logit"))
summary(fit) # model fit



#B-spline regression with polynomial splines
#B-spline regression uses smaller segments of linear or polynomial regression which are stitched together to make a single model.  It is #useful to fit a curve to data when you donâ€™t have a theoretical model to use (e.g. neither linear, nor polynomial, nor nonlinear).  It #does not assume a linear relationship between the variables, but the residuals should still be normal and independent.  The model may #be influenced by outliers.
library(splines)
Input = ("
 Length  Clutch
 284      3 
 290      2 
 290      7
 290      7 
 298     11 
 299     12
 302     10 
 306      8 
 306      8
 309      9 
 310     10 
 311     13
 317      7 
 317      9 
 320      6
 323     13 
 334      2 
 334      8
")

Data = read.table(textConnection(Input),header=TRUE)
model = lm(Clutch ~ bs(Length,
                        knots = 5,     # How many internal segment nodes?
                        degree = 2),   # 1=local linear fits, 2=quadratic
           data = Data)

summary(model) 


