mockdatabase <- data.frame("PartID" = rep_len(1:180,360),
                           "Age" = round(stats::runif(360, 19, 23), digits = 0),
                           "Sex" = round(stats::runif(360, 0, 1), digits = 0),
                           "Congruency" = rep_len(c(rep_len("Congruent",180),rep_len("Incongruent",180)),360),
                           "Attribute" = round(stats::runif(360, 0, 100), digits = 1),
                           "DV" = round(stats::runif(360, 200, 500), digits = 1))
# Force some effects
mockdatabase$AttributeZ = (mockdatabase$Attribute-mean(mockdatabase$Attribute))/sd(mockdatabase$Attribute)
selectidx = which(mockdatabase$Congruency == 'Incongruent')
selectidx = sort(sample(selectidx, floor(length(selectidx)/3)))
mockdatabase$DV[selectidx] = mockdatabase$DV[selectidx] + (mockdatabase$AttributeZ[selectidx] * 2)

tryCatch(library(lme4), error=function(e){install.packages("lme4"); library(lme4)})
tryCatch(library(lmerTest), error=function(e){install.packages("lmerTest"); library(lmerTest)}) # modifies lme4
tryCatch(library(emmeans), error=function(e){install.packages("emmeans"); library(emmeans)}) #lsmeans

fit <- lmerTest::lmer(DV ~ Congruency*Attribute + (1 | PartID) + (1 | Age) + (1 | Sex), data=mockdatabase, REML=FALSE)
result <- anova(fit, type = 3)
show(result)
