tryCatch(library(ez), error=function(e){install.packages("ez"); library(ez)})
tryCatch(library(psychometric), error=function(e){install.packages("psychometric"); library(psychometric)})

# Setup exemplar data
# Between Subjects Variable - Group
# Within Subjects Variables - Condition and Time
mockdatabase <- data.frame("PartID" = rep_len(1:60,360), 
                           "Group" = rep_len(c(rep_len("GroupA",30),rep_len("GroupB",30)),360),
                           "Condition" = c(rep_len("ConditionX",180),rep_len("ConditionY",180)),
                           "Time" = rep_len(c(rep_len("Time1",60),rep_len("Time2",60),rep_len("Time3",60)),360),
                           "Alertness" = round(stats::runif(360, 20, 30), digits = 2))

# Force some effects
#mockdatabase$Alertness[which(mockdatabase$Group == "GroupA")] <- mockdatabase$Alertness[which(mockdatabase$Group == "GroupA")] * 1.5
mockdatabase$Alertness[which(mockdatabase$Condition == "ConditionX" & mockdatabase$Time == "Time3")] <- mockdatabase$Alertness[which(mockdatabase$Condition == "ConditionX" & mockdatabase$Time == "Time3")] * 1.5

numberofgroups <- 2
numberofparticipantsineachgroup <- 60
numerofconditionsforeachparticipant <- 2
numeroftimeswithineachcondition <- 3
mockdatabase <- data.frame(matrix(NA, nrow=0,ncol=6))
names(mockdatabase) <- c("PartID", "Sex", "Group", "Condition", "Time", "Alertness")

cGroup <- sort(sample(1:(numberofparticipantsineachgroup*2), numberofparticipantsineachgroup, replace=F))
for (cParticipant in 1:(numberofparticipantsineachgroup*2)) {
  partceiling <- round(stats::runif(1, 30, 50),digits=2)
  partfloor <- round(stats::runif(1, 9, 29),digits=2)
  partsex <- sample(0:1,1)
  
  for (cCondition in 1:numerofconditionsforeachparticipant) {
    
    for (cTimes in 1:numeroftimeswithineachcondition) {
      
      # create a 3 way interaction
      groupcheck <- which(cGroup == cParticipant)
      if ((length(which(cGroup == cParticipant)) > 0) & (cTimes > 2) & (cCondition > 1)) {
        partcondition <- round(stats::runif(1, -1+(cCondition*1), 2+(cCondition*1)),digits=3)
        partmodifier <- round(stats::runif(1, 0-(cTimes*2), 5-(cTimes*2)),digits=3) * partcondition
      } else {
        partmodifier <- round(stats::runif(1, 0-(cTimes*1.5), 5-(cTimes*1.5)),digits=3)
      }
      
      tempmockdatabase <- data.frame(matrix(NA, nrow=1,ncol=6))
      names(tempmockdatabase) <- c("PartID", "Sex", "Group", "Condition", "Time", "Alertness")
      tempmockdatabase[,"PartID"] <- sprintf('PID%03d',cParticipant)
      tempmockdatabase[,"Sex"] <- partsex
      groupcheck <- which(cGroup == cParticipant)
      if (length(which(cGroup == cParticipant)) > 0) {
        tempmockdatabase[,"Group"] <- sprintf('Group%d',1)
      } else {
        tempmockdatabase[,"Group"] <- sprintf('Group%d',2)
      }
      tempmockdatabase[,"Condition"] <- sprintf('Condition%d',cCondition)
      tempmockdatabase[,"Time"] <- sprintf('Time%d',cTimes)
      tempmockdatabase[,"Alertness"] <- round(stats::runif(1, partfloor, partceiling),digits=2) + partmodifier
      mockdatabase <- rbind(mockdatabase, tempmockdatabase)
      rm(tempmockdatabase)
    }
  }
}

rm(numberofgroups, numberofparticipantsineachgroup, numerofconditionsforeachparticipant, numeroftimeswithineachcondition, cGroup, cParticipant, cCondition, cTimes,partceiling, partfloor, partsex,partcondition,parttimes)

df <- Rmimic::descriptives(variables=c('Alertness'),groupvariable=c("Group","Condition", "Time"), data=mockdatabase, verbose=FALSE)

ggplot(df, aes(x=Time, y=Mean, group=Condition, color=Condition)) +
  geom_line(size=1) +
  geom_errorbar(aes(ymin=Mean-SE, ymax=Mean+SE), width=0.25, size=0.5) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border=element_blank(),
        strip.background = element_blank(),
        panel.background=element_blank(),
        axis.title.x = element_text(family = "sans", colour = "black", size = 10),
        axis.title.y = element_text(family = "sans", colour = "black", size = 10),
        axis.text = element_text(family = "sans", colour = "black", size = 10),
        axis.line = element_line(size = 1, linetype = "solid"), legend.position="bottom") +
  facet_wrap(~as.factor(Group), nrow=1)



result <- ez::ezANOVA(data=mockdatabase,
                      dv=Alertness,wid=PartID,
                      between=Group,within=.(Condition, Time),
                      type=3,detailed=TRUE,return_aov=TRUE)

# Compute partial eta squared
result$ANOVA$partialetasquared <- result$ANOVA$SSn/(result$ANOVA$SSn+result$ANOVA$SSd)

# Calculate f^2 = partialeta^2 / ( 1 - partialeta^2 )
result$ANOVA$pesfsquared <- result$ANOVA$partialetasquared/(1-result$ANOVA$partialetasquared)
result$ANOVA$gesfsquared <- result$ANOVA$ges/(1-result$ANOVA$ges)

# Compute effect size confidence intervals
result$ANOVA$fsquared.ci.lower <- NA
result$ANOVA$fsquared.ci.upper <- NA

# Compute effect size confidence intervals
result$ANOVA$fsquared.ci.lower <- NA
result$ANOVA$fsquared.ci.upper <- NA
for (cT in 1:nrow(result$ANOVA)) {
  tempR2 <- result$ANOVA$ges[cT]
  if (!is.na(tempR2)) {
    temp <- psychometric::CI.Rsq(tempR2, length(unique(unlist(as.character(mockdatabase$PartID)))), length(unlist(strsplit(as.character(result$ANOVA$Effect[cT]),"[:]"))), level = 0.95)
    if (temp$LCL[1]<0) {
      result$ANOVA$fsquared.ci.lower[cT] <- 0
    } else {
      result$ANOVA$fsquared.ci.lower[cT] <- (temp$LCL[1]/(1-temp$LCL[1]))
    }
    if (temp$UCL[1] > 1) {
      result$ANOVA$fsquared.ci.upper[cT] <- Inf
    } else {
      result$ANOVA$fsquared.ci.upper[cT] <- (temp$UCL[1]/(1-temp$UCL[1]))
    }
    rm(temp)
  }
  rm(tempR2)
}
rm(cT)

result


